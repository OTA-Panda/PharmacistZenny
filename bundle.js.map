{"version":3,"sources":["webpack/bootstrap","./src/zenny.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,gB;AACA,QAAQ,YAAY;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA,iBAAiB,iBAAiB,OAAO;AACzC,mBAAmB,oBAAoB,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA,iBAAiB,mBAAmB;AACpC,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD,kC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/zenny.js\");\n","const canvas = document.getElementById('zenny')\nconst context = canvas.getContext('2d')\n\nconst scaleUp = 20\n//multiplies 1px by scaleUp to x, y\ncontext.scale(scaleUp, scaleUp)\n\n//pushes an array of length 'width' with each element as 0\n//into array 'matrix,' decrementing 'height' until falsey (i.e. 0)\nbottleCreate = (width, height) => {\n  const matrix = []\n  while (height--) { \n    matrix.push(new Array(width).fill(0))\n  }\n  return matrix\n}\n\n//instantiate logical 2d field with 8 columns and 16 rows filled with 0s\nbottle = bottleCreate(8, 16)\nconsole.log(bottle); console.table(bottle)\n\n//offsets for moving graphics and logic\nconst bottleOffset = {\n  x: 3,\n  y: 3,\n}\n\n//position of spout on bottle\nconst bottleSpout = {\n  x: 3,\n  y: 0,\n}\n\n// logical 2d matrix of pill with room to rotate\nconst pillMatrix = [\n  [1, 0],\n  [1, 0],\n]\n\nbottleClear = () => {\n  bottle.forEach(row => row.fill(0))\n}\n\npillCreate = (type) => {\n  switch (type) {\n    case 'rr':\n      return [\n        ['red', 0],\n        ['red', 0],\n      ]\n    case 'ry':\n      return [\n        ['red', 0],\n        ['yellow', 0],\n      ]\n    case 'rb':\n      return [\n        ['red', 0],\n        ['blue', 0],\n      ]\n    case 'yy':\n      return [\n        ['yellow', 0],\n        ['yellow', 0],\n      ]\n    case 'yb':\n      return [\n        ['yellow', 0],\n        ['blue', 0],\n      ]\n    case 'bb':\n      return [\n        ['blue', 0],\n        ['blue', 0],\n      ]\n  }\n}\n\n\n//paramaters of player's pill and its logical shape/orientation\nconst player = { \n  pos: {x: 3, y: -1}, //starting position of pill\n  pill: pillCreate('bb'),\n}\n\ndraw = () => {\n  context.fillStyle = '#000' //black\n  context.fillRect(0, 0, canvas.width, canvas.height) //background based on index.html\n  context.fillStyle = '#55f' //blue\n  context.fillRect(0 + bottleOffset.x, 0 + bottleOffset.y, 8, 16) //bottle\n  context.fillStyle = '#55f' //blue\n  context.fillRect(\n    bottleSpout.x + bottleOffset.x,\n    bottleSpout.y + bottleOffset.y - 1,\n    2, 1) //spout\n  drawMatrix(bottle, { x: 0, y: 0}) //draw any spaces that exist in logic\n  drawMatrix(player.pill, player.pos) //draws shape based on position\n\n}\n\n\n//function that defines pill based on matrix and offset given\ndrawMatrix = (matrix, offset) => {\n  matrix.forEach((row, y) => {\n    row.forEach((value, x) => {\n      if (value !== 0) {\n        context.fillStyle = value\n        context.fillRect(\n          x + offset.x + bottleOffset.x, //position x\n          y + offset.y + bottleOffset.y, //position y\n          1, //1 unit(px) wide\n          1  //1 unit(px) high\n        )\n      }\n    })\n  })\n}\n\n//based on matrix\nmerge = (bottle, player) => {\n  player.pill.forEach((row, y) => {\n    row.forEach((value, x) => {\n      if (value !== 0) {\n        bottle[y + player.pos.y][x + player.pos.x] = value\n      }\n    })\n  })\n}\n\n// drape over bottle and check if player's piece collides\ncollide = (bottle, player) => {\n  const [pill, offset] = [player.pill, player.pos]\n  for (let y = 0; y < pill.length; ++y) { //add y first to check next pos\n    for (let x = 0; x < pill[y].length; ++x) { //add x first to check next pos\n      if (\n        pill[y][x] !== 0 && // if pill shape exists in space...\n        (\n          bottle[y + offset.y] && // check if bottle row exists then...\n          bottle[y + offset.y][x + offset.x] // check if collumn exists...\n        ) !== 0 //if row and column exist, check if space is occupied\n      ) {\n        return true // if all conditions pass, collision is true\n      }\n    }\n  }\n  return false // else collision is false\n}\n\nlet dropCounter = 0\nlet dropInterval = 1000 // 1000ms = 1s\nlet lastTime = 0 \n\npillNew = () => {\n  const pills = ['rr', 'ry', 'rb', 'yy', 'yb', 'bb']\n  // console.log(pills[pills.length * Math.random() | 0])\n  player.pill = pillCreate(pills[pills.length * Math.random() | 0])\n  player.pos.x = bottleSpout.x\n  player.pos.y = bottleSpout.y\n  console.log(bottleSpout.x)\n  console.log(bottleSpout.y)\n  if (collide(bottle, player)) {\n    bottleClear()\n    \n  }\n}\n\npillDrop = () => {\n  player.pos.y++\n  if (collide(bottle, player)) {\n    player.pos.y--\n    merge(bottle, player)\n    pillNew()\n    \n    // console.table(bottle)\n  }\n  dropCounter = 0\n}\n\n//Define Game Loop\nupdate = (time = 0) => {\n  const deltaTime = time - lastTime //change in time\n  lastTime = time //roughly 16.7ms\n\n  //update player position of matrix on y value\n  //whenever dropCounter is greater than 1s\n  dropCounter += deltaTime\n  if (dropCounter > dropInterval) {\n    pillDrop()\n  }\n  // console.log(deltaTime)\n  draw() //draw or rather re-draw\n  requestAnimationFrame(update) //recursive loop -- never ends\n}\n\n// moves player in desired direction, but stops if collision is true\nplayerMove = (dir) => {\n  player.pos.x += dir\n  if (collide(bottle, player)) {\n    player.pos.x -= dir\n  }\n}\n\nrotate = (matrix, dir) => {  //***NEED TO FIX\n  // console.table(matrix)\n  for (let y = 0; y < matrix.length; ++y) {\n    for (let x = 0; x < y; ++x) {\n      [\n        matrix[x][y],\n        matrix[y][x]\n      ] = [          //flips 2d array along 135 deg axis; everything backwards\n        matrix[y][x],\n        matrix[x][y]\n      ]\n    }\n  }\n  if (dir > 0) {\n    matrix.forEach(row => row.reverse())\n  } else {\n    matrix.reverse()\n  }\n}\n\nplayerRotate = (dir) => {\n  const pos = player.pos.x\n  let offset = -1\n  rotate(player.pill, dir)\n  while (collide(bottle, player)) {\n    player.pos.x += offset\n    offset = -(offset + (offset > 0 ? 1 : -1))\n    if (offset > player.pill[0].length) {\n      rotate(player.pill, -dir)\n      player.pos.x = pos\n      return\n    }\n  }\n}\n\n//User Interface\ndocument.addEventListener('keydown', event => {\n  // console.log(event)\n  switch (event.code) {\n    case \"ArrowLeft\":  // move pill left\n      playerMove(-1)\n      break\n    case \"ArrowRight\": // move pill right\n      playerMove(+1)\n      break\n    case \"ArrowDown\":  // move pill down : accelerate\n      pillDrop()\n      break\n    case \"KeyD\":       // rotate counter-clockwise\n      playerRotate(-1)\n      break\n    case \"KeyF\":       // rotate clockwise\n      playerRotate(1)\n      break\n    case \"Space\": //to be used for instant drop\n      break\n  }\n})\n\n\nupdate () //instantiates game loop"],"sourceRoot":""}